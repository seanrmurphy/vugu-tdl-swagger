// Code generated by go-swagger; DO NOT EDIT.

package developers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// UpdateTodoReader is a Reader for the UpdateTodo structure.
type UpdateTodoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTodoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateTodoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewUpdateTodoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewUpdateTodoOK creates a UpdateTodoOK with default headers values
func NewUpdateTodoOK() *UpdateTodoOK {
	return &UpdateTodoOK{}
}

/*UpdateTodoOK handles this case with default header values.

item updated
*/
type UpdateTodoOK struct {
}

func (o *UpdateTodoOK) Error() string {
	return fmt.Sprintf("[PUT /todo/{todoid}][%d] updateTodoOK ", 200)
}

func (o *UpdateTodoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTodoNotFound creates a UpdateTodoNotFound with default headers values
func NewUpdateTodoNotFound() *UpdateTodoNotFound {
	return &UpdateTodoNotFound{}
}

/*UpdateTodoNotFound handles this case with default header values.

item not found
*/
type UpdateTodoNotFound struct {
}

func (o *UpdateTodoNotFound) Error() string {
	return fmt.Sprintf("[PUT /todo/{todoid}][%d] updateTodoNotFound ", 404)
}

func (o *UpdateTodoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
